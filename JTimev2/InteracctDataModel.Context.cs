//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JTimev2
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class InteracctDataDbContext : DbContext
    {
        public InteracctDataDbContext()
            : base("name=InteracctDataDbContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<GetJobNumbersResult> GetJobNumbers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetJobNumbersResult>("GetJobNumbers");
        }
    
        public virtual ObjectResult<GetActivitiesResult> GetActivities(Nullable<int> jobNumber, string package)
        {
            var jobNumberParameter = jobNumber.HasValue ?
                new ObjectParameter("JobNumber", jobNumber) :
                new ObjectParameter("JobNumber", typeof(int));
    
            var packageParameter = package != null ?
                new ObjectParameter("Package", package) :
                new ObjectParameter("Package", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetActivitiesResult>("GetActivities", jobNumberParameter, packageParameter);
        }
    
        public virtual ObjectResult<GetPackagesResult> GetPackages(Nullable<int> jobNumber)
        {
            var jobNumberParameter = jobNumber.HasValue ?
                new ObjectParameter("JobNumber", jobNumber) :
                new ObjectParameter("JobNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPackagesResult>("GetPackages", jobNumberParameter);
        }
    
        public virtual ObjectResult<GetVariationNumbersResult> GetVariationNumbers(Nullable<int> jobnumber, string package, string activity)
        {
            var jobnumberParameter = jobnumber.HasValue ?
                new ObjectParameter("jobnumber", jobnumber) :
                new ObjectParameter("jobnumber", typeof(int));
    
            var packageParameter = package != null ?
                new ObjectParameter("package", package) :
                new ObjectParameter("package", typeof(string));
    
            var activityParameter = activity != null ?
                new ObjectParameter("activity", activity) :
                new ObjectParameter("activity", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVariationNumbersResult>("GetVariationNumbers", jobnumberParameter, packageParameter, activityParameter);
        }
    
        public virtual ObjectResult<GetNCRCodesResult> GetNCRCodes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNCRCodesResult>("GetNCRCodes");
        }
    
        public virtual ObjectResult<GetWorkTasksResult> GetWorkTasks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorkTasksResult>("GetWorkTasks");
        }
    
        public virtual ObjectResult<GetActivityFinancialsResult> GetActivityFinancials(Nullable<int> jobNumber, string package, string activity)
        {
            var jobNumberParameter = jobNumber.HasValue ?
                new ObjectParameter("JobNumber", jobNumber) :
                new ObjectParameter("JobNumber", typeof(int));
    
            var packageParameter = package != null ?
                new ObjectParameter("Package", package) :
                new ObjectParameter("Package", typeof(string));
    
            var activityParameter = activity != null ?
                new ObjectParameter("Activity", activity) :
                new ObjectParameter("Activity", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetActivityFinancialsResult>("GetActivityFinancials", jobNumberParameter, packageParameter, activityParameter);
        }
    }
}
