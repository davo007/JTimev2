@model IEnumerable<JTimev2.Models.Timesheet>
@{
    ViewBag.Title = "Timesheet Form";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Timesheet Form</h2>
<label for="weekending">Weekending Date:</label>
<select id="weekending" class="selectize-dropdown">
    <option value="0">Select Weekending</option>
</select>


<table id="timesheet" class="table table-striped table-bordered table-hover">
    <thead>
        <tr>
            <th>NCR</th>
            <th>Job Number</th>
            <th>Package</th>
            <th>Activity</th>
            <th>Variation</th>
            <th>Work Task</th>
            <th>Mon</th>
            <th>Tue</th>
            <th>Wed</th>
            <th>Thur</th>
            <th>Fri</th>
            <th>Sat</th>
            <th>Sun</th>
            <th>Total</th>
            <th>Billable</th>
            <th>Total Costs</th>
            <th>Total Invoices</th>
            <th>Adjusted Contract</th>
            <th>Description</th>
           
        </tr>
       
    </thead>
    <tfoot>
        <tr>
            <th colspan="13" style="text-align:right">Total:</th>
            <th></th>
            <th></th>
        </tr>
    </tfoot>
    <tbody>

    </tbody>
    
</table> 

@section scripts
{
    <script>

        
        var editor;
        var oTable;

        $(document).ready(function () {

            //$('.selectpicker').selectpicker('render');

            function GetJobNumbers() {
                $.ajax({
                    url: '/api/InteracctData/GetJobNumbers',
                    dataType: 'json',
                    success: function (response, statusText) {
                        //console.log(response);
                        var dropdownlist = new Array();

                        if (editor.val('ncr') == "0.NA") {
                            var l = response.length;
                            for (var i = 0; i < l ; i++) {
                                dropdownlist[i] = {
                                    "label": response[i].jobNumber + " - " + response[i].jobDesc,
                                    "value": response[i].id
                                };
                            }
                        } else {
                            dropdownlist[0] = {
                                "label": 0,
                                "value": 0
                            };
                        }
                        //console.log(dropdownlist);
                        editor.field('jobNumber').update(dropdownlist);
                    }
                });

            }

            function GetNCRCodes() {
                $.ajax({
                    url: '/api/InteracctNCRCodes/GetNCRCodes',
                    dataType: 'json',
                    success: function (response, statusText) {
                        //console.log(response);
                        var dropdownlist = new Array();
                        var l = response.length;
                        for (var i = 0; i < l ; i++) {
                            dropdownlist[i] = {
                                "label": response[i].ncrCode + " - " + response[i].ncrCodeDesc,
                                "value": response[i].id
                            };

                            dropdownlist[l] = {
                                "label": "0.NA - Not Applicable",
                                "value": "0.NA"
                            }
                        }
                        //console.log(dropdownlist);
                        editor.field('ncr').update(dropdownlist);
                        
                    }
                });

            }

            function GetWorkTasks() {
                $.ajax({
                    url: '/api/InteracctWorkTasks/GetWorkTasks',
                    dataType: 'json',
                    success: function (response, statusText) {
                        //console.log(response);
                        var dropdownlist = new Array();
                        var l = response.length;
                        for (var i = 0; i < l ; i++) {
                            dropdownlist[i] = {
                                "label": response[i].workTask + " - " + response[i].workTaskDesc,
                                "value": response[i].id
                            };

                            dropdownlist[l] = {
                                "label": "0.NA - Not Applicable",
                                "value": "0.NA"
                            }
                        }
                        //console.log(dropdownlist);
                        editor.field('workTask').update(dropdownlist);
                    }
                });

            }

            $.ajax({
                type: "GET",
                url: "/api/weekendings",
                dataType: 'json',
                success: function (json) {
                    var $el = $("#weekending");
                    $el.empty();
                    $el.append($("<option></option>")
                        .attr("value", '').text('Select Weekending'));
                    $.each(json, function (value, key) {
                        //console.log(key.id);
                        $el.append($("<option></option>")
                            .attr("value", key.id).text(key.dateOfSun));
                    });
                }
            });

            editor = new $.fn.dataTable.Editor({
                ajax: {
                    create: {
                        type: 'POST',
                        contentType: 'application/json',
                        url: "/api/timesheets/new",
                        data: function (d) {
                            
                            //console.log(x);
                            d.data[0].weekendingId = $("#weekending").val();
                            var obj = JSON.parse(JSON.stringify(d));
                            //console.log(obj.data[0]);
                            return JSON.stringify(obj.data[0]);
                        }
                        
                        
                    },
                    edit: {
                        type: 'PUT',
                        contentType: 'application/json',
                        url: "/api/timesheets/_id_",
                        dataType: 'json',
                        data: function (d) {
                            
                            //d.data[0].weekendingId = $("#weekending").val();
                            var obj3 = JSON.parse(JSON.stringify(d.data));
                            var id = Object.keys(obj3);
                            obj3[id[0]].weekendingId = $("#weekending").val();
                            //console.log(obj3);
                            return JSON.stringify(obj3[id[0]]);
                        }
                    },

                    remove: {
                        type: 'DELETE',
                        url: "/api/timesheets/_id_"
                    }
                
                
                },
                table: "#timesheet",
                idSrc: 'id',
                fields: [{
                    label: "NCR:",
                    name: "ncr",
                    type: "select",
                    //className: "selectize-dropdown",
                    options: GetNCRCodes()
                }, {
                    label: "Job Number:",
                    name: "jobNumber",
                    type: "select",
                    //className: "selectize-dropdown",
                    options: GetJobNumbers()
               },{
                    label: "Package:",
                    name: "package",
                    type: "select",
                    //className: "selectize-dropdown",
                    options: []
                //}, {
                //    label: "Package Des:",
                //    name: "packdesc",
                                    
                }, {
                    label: "Activity:",
                    name: "activity",
                    type: "select",
                    //className: "selectize-dropdown",
                    options: []
                //}, {
                //    label: "Activity Des:",
                //    name: "actdesc",
                
                }, {
                    label: "Variation:",
                    name: "variation",
                    type: "select",
                    //className: "selectize-dropdown",
                    options: []
                }, {
                    label: "Work Task:",
                    name: "workTask",
                    type: "select",
                    //className: "selectize-dropdown",
                    options: GetWorkTasks()
                }, {
                    label: "Monday Time:",
                    name: "mondayTime"
                }, {
                    label: "Tuesday Time:",
                    name: "tuesdayTime"
                }, {
                    label: "Wednesday Time:",
                    name: "wednesdayTime"
                }, {
                    label: "Thursday Time:",
                    name: "thursdayTime"
                }, {
                    label: "Friday Time:",
                    name: "fridayTime"
                }, {
                    label: "Saturday Time:",
                    name: "saturdayTime"
                }, {
                    label: "Sunday Time:",
                    name: "sundayTime"
                }, {
                    label: "Total:",
                    name: "total",
                    type: "readonly"
                }, {
                    label: "Billable:",
                    name: "billable"
                },{
                    label: "Total Cost:",
                    name: "totalCost"
                    
                },{
                    label: "Total Invoices:",
                    name: "totalInvoices"
                },{
                    label: "Adjusted Contract",
                    name: "adjContract"
                   
                },{
                    label: "Description:",
                    name: "description",
                    type: 'textarea'
                }
                    ]

            });

            $('#timesheet').on('click', 'tbody td.editable',function (e) {
                editor.inline(this, {
                    submit: 'allIfChanged'

                });
            });

            editor.dependent('jobNumber', function (val, data, callback) {
                $.ajax({
                    url: '/api/interacctData/GetPackages?JobNumber=' + val,
                    dataType: 'json',
                    success: function (json) {
                        var tmp = Array();
                        //var tmp2 = Array();
                        var newjson = {
                            //"labels":{
                            //    "package": []
                            //},
                            "options": {
                                "package": []
                            },
                            "values": {
                                "package": []
                            }
                        };
                        var l = json.length;
                        for (var i = 0; i < l ; i++) {
                            //tmp[i] = json[i].name;
                            tmp[i] = {
                                "label": json[i].name + " - " + json[i].desc,
                                "value": json[i].id
                            };
                            //tmp2[i] = json[i].name + " - " + json[i].desc;
                        }
                        newjson["options"]["package"] = tmp;
                        //newjson["labels"]["package"] = tmp2;
                        

                        if (data.row != null) {
                            newjson["values"]["package"] = data["row"]["package"];
                        } else {
                            newjson["values"]["package"] = tmp[0];
                        }
                        //console.log(newjson);
                        callback(newjson);
                    }
                });
                //console.log(val);
            });

            editor.dependent('package', function (val, data, callback) {
                $.ajax({
                    url: '/api/interacctData/GetActivities?JobNumber=' + editor.val('jobNumber') + "&Package=" + val,
                    dataType: 'json',
                    success: function (json) {
                        var tmp = Array();
                        //var tmp2 = Array();
                        var newjson = {
                            //"labels": {
                            //    "activity": []
                            //},
                            "options": {
                                "activity": []
                            },
                            "values": {
                                "activity": []
                            }
                        };
                        //console.log(json);

                        var l = json.length;
                        for (var i = 0; i < l ; i++) {
                            //tmp[i] = json[i].name;
                            tmp[i] = {
                                "label": json[i].name + " - " + json[i].desc,
                                "value": json[i].id
                            };
                            //tmp2[i] = json[i].name + " - " + json[i].desc;
                        }

                        newjson["options"]["activity"] = tmp;
                        //newjson["labels"]["activity"] = tmp2;

                        if (data.row != null) {

                            newjson["values"]["activity"] = data["row"]["activity"];
                        } else {
                            newjson["values"]["activity"] = tmp[0];
                        }
                        //console.log(newjson);
                        //console.log("Package Data " + data)
                        callback(newjson);
                    }
                });
                //console.log(val);
            });

            editor.dependent('activity', function (val, data, callback) {
                $.ajax({
                    url: '/api/interacctData/GetVariations?JobNumber=' + editor.val('jobNumber') + "&Package=" + editor.val('package') + "&Activity=" + val,
                    dataType: 'json',
                    success: function (json) {
                        var tmp = Array();
                        var newjson = {
                            "options": {
                                "variation": []
                            },
                            "values": {
                                "variation": []
                            }
                        };

                        //console.log(json);

                        var l = json.length;
                        for (var i = 0; i < l ; i++) {
                            tmp[i] = json[i].variationNumber;
                        }

                        tmp[l] = 0;

                        newjson["options"]["variation"] = tmp;

                        if (data.row != null) {

                            newjson["values"]["variation"] = data["row"]["variation"];
                        } else {
                            newjson["values"]["variation"] = tmp[0];
                        }
                        //console.log(newjson);
                        //console.log("Package Data " + data)
                        callback(newjson);
                    }
                });

                $.ajax({
                    url: '/api/InteracctActivityFinancials/GetActivityFinancials?JobNumber=' + editor.val('jobNumber') + "&Package=" + editor.val('package') + "&Activity=" + val,
                    dataType: 'json',
                    success: function (json) {
                        //console.log(json);
                        if (json.length > 0) {
                            var newjson1 = {

                                "values": {
                                    "totalCost": json[0].totalCost,
                                    "totalInvoices": json[0].totalInvoices,
                                    "adjContract": json[0].adjContract
                                }
                            }

                            callback(newjson1);
                        }
                        //console.log(newjson);
                        
                    }
                });

                });
                //console.log(val);
           

            editor.dependent('ncr', function (val, data, callback) {
                var ret = {
                    "values": {
                        "jobNumber": GetJobNumbers(),
                        "workTask": "0.NA"
                    },
                    "hide": ['jobNumber', 'package', 'activity', 'variation', 'workTask']
                };

                var ret2 = {
                    "values": {
                        "jobNumber": GetJobNumbers()
                    },
                    "show": ['jobNumber', 'package', 'activity', 'variation', 'workTask']
                };
                //console.log(data);

                return (val !="0.NA") ? 
                    callback(ret) :
                    callback(ret2);
            });

            var oTable = $("#timesheet").DataTable({
                "createdRow": function (row, data, index) {
                    //console.log("Total Cost: " + data.totalCost);
                    //console.log("Adj Contract: " + data.adjContract);
                    //console.log(isNaN(parseFloat(data.totalCost) / parseFloat(data.adjContract)));
                    //console.log((parseFloat(data.totalCost) / parseFloat(data.adjContract)));
                    if ((parseFloat(data.totalCost) / parseFloat(data.adjContract)) < 0.5) {
                        //console.log("less than 0.5");
                        $('td', row).eq(15).addClass('highlightGood');
                    } else if ((parseFloat(data.totalCost) / parseFloat(data.adjContract)) >= 0.5 && (parseFloat(data.totalCost) / parseFloat(data.adjContract)) < 0.9) {
                        //console.log("greater than 0.5, less than 0.9");
                        $('td', row).eq(15).addClass('highlightNotSoGood');
                    } else if ((parseFloat(data.totalCost) / parseFloat(data.adjContract)) > 0.9) {
                        //console.log("greater than 0.9");
                        $('td', row).eq(15).addClass('highlightBad');
                    } else if (isNaN(parseFloat(data.totalCost) / parseFloat(data.adjContract))) {
                        //console.log("is NaN");
                        $('td', row).eq(15).addClass('highlightBad');
                    } else if ((parseFloat(data.totalCost) / parseFloat(data.adjContract)) == Infinity) {
                        //console.log("is Infinity");
                        $('td', row).eq(15).addClass('highlightBad');
                    }
                    
                },
                "footerCallback": function(row, data, start, end, display){
                    var api = this.api(), data;

                    var intVal = function (i) {
                        return typeof i === 'string' ?
                            i.replace(/[\$,]/g, '') * 1 :
                            typeof i === 'number' ?
                            i : 0;
                    };

                    // Total over all pages
                    totalTime = api
                        .column(13)
                        .data()
                        .reduce(function (a, b) {
                            return intVal(a) + intVal(b);
                        }, 0);

                    $(api.column(13).footer()).html(
                        totalTime
                        );
                    
                    totalBillable = api
                        .column(14)
                        .data()
                        .reduce(function (a, b) {
                            return intVal(a) + intVal(b);
                        }, 0);
                                        
                    $(api.column(14).footer()).html(
                        totalBillable
                        );
                },
                bPaginate: false,
                dom: "Brtip",
                ajax: {
                    url: "/api/timesheetsbydate/" + $("#weekending").val(),
                    //data: function(d){
                    //    d.id = $("#weekending").val();
                    //},
                    type: 'POST',
                    dataSrc: ""
                },
                //initComplete: function (settings) {
                //    $('#timesheet thead th').each(function () {
                //        var $td = $(this);
                //        $td.attr('title', $td.text());
                //    });

                //    $('#timesheet thead th[title]').tooltip(
                //    {
                //        "container": 'body'
                //    });
                    
                //},
                autoWidth: "true",
                columns: [
                    {
                        data: "ncr"
                        //className: 'editable'
                    },
                    {
                        data: "jobNumber"
                                                
                    },
                    {data: "package"},
                    {data: "activity"},
                    
                    {
                        data: "variation",
                        className: 'editable'
                        
                    },                 
                    {
                        data: "workTask",
                        className: 'editable'
                    },
                    {
                        data: "mondayTime",
                        className: 'editable'
                       
                    },
                    {
                        data: "tuesdayTime",
                        className: 'editable'
                        
                    },
                    {
                        data: "wednesdayTime",
                        className: 'editable'
                        
                    },
                    {
                        data: "thursdayTime",
                        className: 'editable'
                        
                    },
                    {
                        data: "fridayTime",
                        className: 'editable'
                        
                    },
                    {
                        data: "saturdayTime",
                        className: 'editable'
                        
                    },
                    {
                        data: "sundayTime",
                        className: 'editable'
                        
                    },
                    {
                        data: "total"                      
                        
                    },
                    {
                        data: "billable",
                        className: 'editable'
                    },
                    {
                        data: "totalCost",
                        render: $.fn.dataTable.render.number(',', '.', 2, '$')
                    },
                    {
                        data: "totalInvoices",
                        render: $.fn.dataTable.render.number(',', '.', 2, '$')
                    },
                    {
                        data: "adjContract",
                        render: $.fn.dataTable.render.number(',', '.', 2, '$')
                    },
                    {
                        data: "description",
                        className: 'editable'
                    }
                    

                ],
                select: {
                    style: 'os',
                    selector: 'td:first-child'
                },
                buttons: [
                    {
                        extend: "create",
                        editor: editor,
                        formButtons: [
                            'Create',
                            { label: 'Cancel', fn: function () { this.close(); } }
                    ]
                    },
                    {
                        extend: "edit",
                        editor: editor,
                        formButtons: [
                            'Edit',
                            { label: 'Cancel', fn: function () { this.close(); } }
                        ]
                    },
                    {
                        extend: "remove",
                        editor: editor,
                        formButtons: [
                            'Delete',
                            { label: 'Cancel', fn: function () { this.close(); } }
                        ]
                    },
                    //'copyHtml5',
                    {
                        extend: 'pdfHtml5',
                        orientation: 'landscape',
                        pageSize: 'A4'
                    },
                    'print'
                ]

            });

            $("#weekending").on('change', function () {
                //console.log($("#weekending").val());
                //oTable.ajax.reload();
                oTable.ajax.url("/api/timesheetsbydate/" + $("#weekending").val()).load();
            });
           
            //editor.on('initEdit', function (e, node, data) {
            //    editor.val('package', data.package);
            //    editor.val('activity', data.activity);
            //    //console.log(e);
            //    var pckage = editor.field('package').val();
            //    var activity = editor.field('activity').val();
            //    //pckage.val(oTable.cell('.selected').data());
            //    console.log(data.activity + " " + data.package);
            //});
            
            editor.on('preOpen', function (e, mode, action) {
                //console.log($("#weekending").val());
                if($("#weekending").val() == 0)
                {
                    bootbox.alert("Please select a Weekending Date");
                    //alert("Please select a date");
                    return false;
                }

                //console.log(editor.mode());
                if (editor.mode() == "create") {
                    editor.field('ncr').set("0.NA");
                }
            });

            editor.on('preSubmit', function (e, o, action) {
                //console.log(action);
                if (action !== 'remove') {
                    var total = editor.field('total');
                    var billable = editor.field('billable');
                    var description = editor.field('description');
                    
                    var monday =  parseFloat(editor.field('mondayTime').val());
                    var tuesday = parseFloat(editor.field('tuesdayTime').val());
                    var wednesday = parseFloat(editor.field('wednesdayTime').val());
                    var thursday = parseFloat(editor.field('thursdayTime').val());
                    var friday = parseFloat(editor.field('fridayTime').val());
                    var saturday = parseFloat(editor.field('saturdayTime').val());
                    var sunday = parseFloat(editor.field('sundayTime').val());

                    if (isNaN(monday)) {
                        monday = parseInt(0);
                    }

                    if (isNaN(tuesday)) {
                        tuesday = parseInt(0);
                    }

                    if (isNaN(wednesday)) {
                        wednesday = parseInt(0);
                    }

                    if (isNaN(thursday)) {
                        thursday = parseInt(0);
                    }

                    if (isNaN(friday)) {
                        friday = parseInt(0);
                    }

                    if (isNaN(saturday)) {
                        saturday = parseInt(0);
                    }

                    if (isNaN(sunday)) {
                        sunday = parseInt(0);
                    }
                    
                    var totalcheck = monday + tuesday + wednesday + thursday + friday + saturday + sunday;
                    
                    //console.log(totalcheck);

                    if ( billable.val() == ''){
                        billable.error('Billable hours required');
                        editor.field('total').set(totalcheck);
                       
                    } else if (billable.val() < totalcheck && description.val() == "") {
                        billable.error('Billable less than total, description required');
                        description.error('Billable less than total, description required');
                        editor.field('total').set(totalcheck);
                    } else if (billable.val() > totalcheck) {
                        billable.error('Billable should be less than or equal to Total, ' + totalcheck);
                        editor.field('total').set(totalcheck);
                    }

                    if (this.inError()) {
                        return false;
                    }

                }

                

            });

            

            

        });
    </script>
    
    }
